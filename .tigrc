# Don't display uncommitted changes.

# Ignore case when searching.
set ignore-case = yes


# DISPLAY

# Same as the default, but use relative dates.
set main-view = date:relative author:full commit-title:yes,graph,refs


# BINDINGS

# Allow moving in the main menu while displaying a diff in the bottom of the
# screen.
bind generic J next
bind generic K previous
bind status P !git push origin

# COLORS

# Try to mimic gitk's colors.

color date      default default
color delimiter default default # ~ if text is too long

# Main window.
color cursor         white   blue         # currently selected line
color author         default default
color graph-commit   magenta default      # commit dots in graph
color main-head      green   default bold # HEAD
color main-ref       green   default      # branches
color main-remote    yellow  default      # remote branches
color main-tag       yellow  default bold # tags
color main-local-tag yellow  default bold # local tags (normal tags)

# Information at the top of the commit diff.
color commit                default default
color "Author: "            default default
color "Commit: "            default default
color pp-merge              default default
color "Date: "              default default
color "AuthorDate: "        default default
color "CommitDate: "        default default
color pp-refs               default default
# Special parts of the commit message.
color "    Signed-off-by"   default default
color "    Acked-by"        default default

# Diff coloring.
color diff-header default default bold # diff --git a/.. b/..
color diff-index  default default bold # index abc..def
color diff-chunk  cyan    default      # @@ -.. +.. @@


#Here's a collection of custom bindings you can easily add to your tigrc.
#
#Move in diff view with arrow keys: bind diff Up move-up and bind diff Down move-down
#Intent to add: bind status N !@git add -N %(file) (might be useful if you want to add-patch a newly created file)
#Stage a single line: bind stage 1 stage-update-line
#Interactive rebase: bind main B !git rebase -i %(commit)
#Revert: bind main ! !git revert %(commit)
#Create a new branch: bind refs n !@git branch "%(prompt Enter branch name: )"
#Add/edit notes for the current commit used during a review: bind generic T !git notes edit %(commit)
#less-like page scrolling: bind generic ^f scroll-page-down and bind generic ^b scroll-page-up
#Add verbose flag to git-commit: bind generic C !git commit -v
#Amend last commit: bind generic + !git commit --amend
#Drop the selected stash: bind stash D !?git stash drop %(stash)
#Apply the selected stash: bind stash A !?git stash apply %(stash)
#Stash the unstaged changes: bind status S !?git stash save --keep-index %(prompt)
#Delete a file: bind status D !@?rm %(file)
#Tag the selected commit: bind main T !@git tag %(prompt) %(commit)
#Push local changes to origin: bind status P !git push origin
#Open the commit on Github: bind generic B @sh -c "xdg-open 'https://'$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)'/commit/%(commit)'"
#*Patch the file under the cursor: bind status P !git add --patch %(file)
